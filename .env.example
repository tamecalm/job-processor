# =================================
# JOB PROCESSOR CONFIGURATION
# =================================

# Server Configuration
# Port for the application server
PORT=3000

# Environment (development, staging, production)
NODE_ENV=development

# =================================
# DATABASE CONFIGURATION
# =================================

# MongoDB Connection
# Local MongoDB
MONGO_URI=mongodb://localhost:27017/job_processor

# MongoDB Atlas (Cloud) - Replace with your connection string
MONGO_URI=mongodb+srv://username:password@cluster.mongodb.net/job_processor?retryWrites=true&w=majority

# MongoDB with Authentication (Self-hosted)
MONGO_URI=mongodb://username:password@localhost:27017/job_processor?authSource=admin

# =================================
# REDIS CONFIGURATION
# =================================

# Redis Connection
# Local Redis
REDIS_URI=redis://localhost:6379

# Redis with Authentication
REDIS_URI=redis://username:password@localhost:6379

# Redis with TLS (Upstash, Redis Cloud, etc.)
REDIS_URI=rediss://default:password@host:port

# Upstash Redis Example
REDIS_URI=rediss://default:your-password@your-host.upstash.io:6380

# Redis Labs/Redis Cloud Example
REDIS_URI=rediss://default:password@redis-12345.c1.us-east-1-1.ec2.cloud.redislabs.com:12345

# Alternative Redis Configuration (if using separate variables)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_USERNAME=default
REDIS_PASSWORD=your-redis-password

# =================================
# SECURITY CONFIGURATION
# =================================

# JWT Secret Key (CRITICAL: CHANGE THIS IN PRODUCTION!)
# Generate a secure random string: openssl rand -base64 64
# MUST be at least 32 characters long for security
JWT_SECRET=CHANGE-THIS-TO-A-CRYPTOGRAPHICALLY-SECURE-RANDOM-STRING-AT-LEAST-64-CHARACTERS-LONG

# Admin Password for Dashboard Access (CRITICAL: CHANGE THIS!)
# MUST be at least 12 characters with mixed case, numbers, and symbols
# Example generation: openssl rand -base64 32
ADMIN_PASSWORD=CHANGE-THIS-TO-A-STRONG-PASSWORD-AT-LEAST-12-CHARS

# =================================
# OPTIONAL CONFIGURATION
# =================================

# Rate Limiting Configuration
RATE_LIMIT_POINTS=100
RATE_LIMIT_DURATION=3600

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=combined.log

# Worker Configuration
WORKER_CONCURRENCY=5
JOB_ATTEMPTS=3
JOB_BACKOFF_DELAY=2000

# =================================
# PRODUCTION ENVIRONMENT EXAMPLE
# =================================

# For production deployment, use these settings:
NODE_ENV=production
PORT=3000
MONGO_URI=mongodb+srv://prod-user:secure-password@prod-cluster.mongodb.net/job_processor_prod
REDIS_URI=rediss://default:secure-redis-password@prod-redis-host:6380
JWT_SECRET=super-secure-random-256-bit-string-generated-with-openssl-rand-base64-64
ADMIN_PASSWORD=very-secure-admin-password-with-special-chars-and-numbers-123!

# =================================
# DEVELOPMENT ENVIRONMENT EXAMPLE
# =================================

# For local development with Docker Compose:
NODE_ENV=development
PORT=3000
MONGO_URI=mongodb://root:password@mongodb:27017/job_processor?authSource=admin
REDIS_URI=redis://redis:6379
JWT_SECRET=dev-jwt-secret-key-but-still-make-it-long-enough-for-security
ADMIN_PASSWORD=dev-admin-password-123

# =================================
# TESTING ENVIRONMENT
# =================================

# Create a separate .env.test file for testing:
NODE_ENV=test
MONGO_URI=mongodb://localhost:27017/job_processor_test
REDIS_URI=redis://localhost:6379
JWT_SECRET=test-jwt-secret-but-still-secure-length
ADMIN_PASSWORD=test-admin-password-123

# =================================
# SECURITY NOTES
# =================================

# 1. NEVER commit this file with real credentials to version control
# 2. Use strong, unique passwords for production (minimum 12 characters)
# 3. JWT secrets MUST be at least 32 characters (recommend 64+)
# 4. Rotate JWT secrets regularly in production
# 5. Use TLS/SSL for all database connections in production
# 6. Consider using environment-specific secret management (AWS Secrets Manager, Azure Key Vault, etc.)
# 7. Restrict database access to specific IP addresses/networks
# 8. Enable database authentication and authorization
# 9. Use read-only database users where possible
# 10. Monitor and log all database access
# 11. Regularly update and patch all dependencies
# 12. Use different credentials for each environment (dev/staging/prod)
# 13. Enable audit logging for all authentication attempts
# 14. Implement proper backup and disaster recovery procedures

# =================================
# CREDENTIAL GENERATION COMMANDS
# =================================

# Generate secure JWT secret (64 characters):
# openssl rand -base64 64

# Generate secure admin password:
# openssl rand -base64 32

# Generate secure database password:
# openssl rand -base64 24

# =================================
# TROUBLESHOOTING
# =================================

# Common Issues:
# 1. MongoDB connection timeout: Check network connectivity and authentication
# 2. Redis connection failed: Verify Redis server is running and accessible
# 3. JWT token invalid: Ensure JWT_SECRET matches between sessions and is long enough
# 4. Dashboard login failed: Check ADMIN_PASSWORD configuration and strength
# 5. Jobs not processing: Verify Redis connection and worker initialization

# Debug Mode:
# Set NODE_ENV=development for detailed logging and error messages